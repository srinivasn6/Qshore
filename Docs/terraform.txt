1. Install Terraform:

2. Get the credentials of AWS account

3. export environment variables:
	export AWS_ACCESS_KEY_ID=(your access key id)
	export AWS_SECRET_ACCESS_KEY=(your secret access key)

4. Create a file called main.tf and put the following code in it:
	provider "aws" {
  		region = "us-east-2"
	}

5. Create a file called resources.tf and put the following code
	resource "aws_instance" "rns-ec2" {
  		ami           = "ami-0c55b159cbfafe1f0"
  		instance_type = "t2.micro"
	}

6.	In a terminal, go into the folder where you created main.tf, and run the terraform init command:
	$ terraform init

7. 	Now that you have the provider code downloaded, run the terraform plan command:
	$ terraform plan

8. To actually create the instance, run the terraform apply command
	$ $ terraform apply
	Type in “yes” and hit enter to deploy the EC2 Instance

9. To add one change, you can add a tag to the EC2 instance:
		resource "aws_instance" "rns-ec2" {
  			ami           = "ami-0c55b159cbfafe1f0"
  			instance_type = "t2.micro"
  			tags = {
    			Name = "web-server"
  			}
		}

		$ terraform apply
	-> Then refresh EC2 console

10. The next step is to run a web server on this Instance.

	user_data = <<-EOF
              #!/bin/bash
              echo "Hello, Rise 'n' Shine" > index.html
              nohup busybox httpd -f -p 8080 &
              EOF

11. To allow the EC2 Instance to receive traffic on port 8080, we need to create a security group:
	
	resource "aws_security_group" "instance" {
  		name = "ec2-example-instance"
  		ingress {
    		from_port   = 8080
    		to_port     = 8080
    		protocol    = "tcp"
    		cidr_blocks = ["0.0.0.0/0"]
  		}
	}

12. Resource Reference:
	
	To access the ID of the security group resource, you are going to need to use a resource attribute reference, which uses the following syntax:
		
		<PROVIDER>_<TYPE>.<NAME>.<ATTRIBUTE>
	
	vpc_security_group_ids = [aws_security_group.instance.id]

	$ terraform apply

13. use a web browser or a tool like curl to make an HTTP request to this IP address at port 8080

	http://<EC2_INSTANCE_PUBLIC_IP>:8080

14. input variables:

	The syntax for declaring a variable is:
		variable "NAME" {
 			[CONFIG ...]
		}

	description:
	default:
	type: including string, number, bool, list, map, set, object, tuple, and any

	For the web server example, here is how you can create a variable that stores the port number:
	Create a variables.tf file and put the following

		variable "server_port" {
  			description = "The port the server will use for HTTP requests"
  			type        = number
		}

		$ terraform apply

		variable "server_port" {
 			description = "The port the server will use for HTTP requests"
  			type        = number
  			default     = 8080
		}

15. To use the value from an input variable in your Terraform code, you can use a new type of expression called a variable reference, which has the following syntax:
		
		var.<VARIABLE_NAME>

		resource "aws_security_group" "instance" {
  			name = "ec2-example-instance"
  			ingress {
    			from_port   = var.server_port
    			to_port     = var.server_port
    			protocol    = "tcp"
    			cidr_blocks = ["0.0.0.0/0"]
  			}
		}

		here’s how you can use var.server_port inside of the User Data string:
  		user_data = <<-EOF
              		#!/bin/bash
              		echo "Hello, World" > index.html
              		nohup busybox httpd -f -p "${var.server_port}" &
              		EOF

16. Terraform also allows you to define output variables with the following syntax:
		output "<NAME>" {
 			value = <VALUE>
 			[CONFIG ...]
		}

		output "public_ip" {
  			value       = aws_instance.rns-ec2.public_ip
  			description = "The public IP of the web server"
		}

		$ terraform apply
